-- Crear la base de datos
CREATE DATABASE IF NOT EXISTS OwnersPlots;
USE OwnersPlots;

-- Tabla Owners
CREATE TABLE Owners (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    surname VARCHAR(255),
    dni INT,
    cuit_cuil INT,
    date_birth DATETIME,
    business_name VARCHAR(255),
    active BOOLEAN,
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);

-- Tabla PlotStates
CREATE TABLE PlotStates (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);

-- Tabla PlotTypes
CREATE TABLE PlotTypes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);

-- Tabla Plots
CREATE TABLE Plots (
    id INT PRIMARY KEY AUTO_INCREMENT,
    plot_number INT,
    block_number INT,
    plot_state_id INT,
    plot_type_id INT,
    total_area_in_m2 DECIMAL(10, 2),
    built_area_in_m2 DECIMAL(10, 2),
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT,
    FOREIGN KEY (plot_state_id) REFERENCES PlotStates(id),
    FOREIGN KEY (plot_type_id) REFERENCES PlotTypes(id)
);

-- Tabla PlotOwners 
CREATE TABLE PlotOwners (
    id INT PRIMARY KEY AUTO_INCREMENT,
    plot_id INT,
    owner_id INT,
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT,
    FOREIGN KEY (plot_id) REFERENCES Plots(id),
    FOREIGN KEY (owner_id) REFERENCES Owners(id)
);


-- Tabla OwnersTypes
CREATE TABLE OwnersTypes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);

-- Tabla Files
CREATE TABLE Files (
    id INT PRIMARY KEY AUTO_INCREMENT,
    file_uuid VARCHAR(255),
    name VARCHAR(255),
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);

-- Tabla Files_Plots
CREATE TABLE Files_Plots (
    id INT PRIMARY KEY AUTO_INCREMENT,
    file_id INT,
    plot_id INT,
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT,
    FOREIGN KEY (file_id) REFERENCES Files(id),
    FOREIGN KEY (plot_id) REFERENCES Plots(id)
);

-- Tabla Files_Owners
CREATE TABLE Files_Owners (
    id INT PRIMARY KEY AUTO_INCREMENT,
    file_id INT,
    owner_id INT,
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT,
    FOREIGN KEY (file_id) REFERENCES Files(id),
    FOREIGN KEY (owner_id) REFERENCES Owners(id)
);


-- Tabla de auditoría para Owners
CREATE TABLE Owners_audit (
    version_id INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    version INT,
    name VARCHAR(255),
    surname VARCHAR(255),
    dni INT,
    cuit_cuil INT,
    date_birth DATE,
    business_name VARCHAR(255),
    active BOOLEAN,
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);

-- Tabla de auditoría para PlotTypes
CREATE TABLE PlotTypes_audit (
    version_id INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    version INT,
    name VARCHAR(100),
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);

-- Tabla de auditoría para PlotStates
CREATE TABLE PlotStates_audit (
    version_id INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    version INT,
    name VARCHAR(100),
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);

-- Tabla de auditoría para Plots
CREATE TABLE Plots_audit (
    version_id INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    version INT,
    plot_number INT,
    block_number INT,
    plot_state_id INT,
    plot_type_id INT,
    total_area_in_m2 DECIMAL(10, 2),
    built_area_in_m2 DECIMAL(10, 2),
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);

-- Tabla de auditoría para PlotOwners
CREATE TABLE PlotOwners_audit (
    version_id INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    version INT,
    plot_id INT,
    owner_id INT,
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);

-- Tabla de auditoría para Files
CREATE TABLE Files_audit (
    version_id INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    version INT,
    file_uuid VARCHAR(255),
    name VARCHAR(255),
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);

-- Tabla de auditoría para Files_Plots
CREATE TABLE Files_Plots_audit (
    version_id INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    version INT,
    file_id INT,
    plot_id INT,
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);

-- Tabla de auditoría para Files_Owners
CREATE TABLE Files_Owners_audit (
    version_id INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    version INT,
    file_id INT,
    owner_id INT,
    created_datetime DATETIME,
    created_user INT,
    last_updated_datetime DATETIME,
    last_updated_user INT
);


-- Triggers
DELIMITER $$
CREATE TRIGGER trg_owners_insert
AFTER INSERT ON Owners
FOR EACH ROW
BEGIN
    INSERT INTO Owners_audit (id, version, name, surname, dni, cuit_cuil, date_birth, business_name, active, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, 1, NEW.name, NEW.surname, NEW.dni, NEW.cuit_cuil, NEW.date_birth, NEW.business_name, NEW.active, NEW.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$ 

DELIMITER $$
CREATE TRIGGER trg_owners_update
AFTER UPDATE ON Owners
FOR EACH ROW
BEGIN
    DECLARE latest_version INT;
    SELECT MAX(version) INTO latest_version FROM Owners_audit WHERE id = NEW.id;
    SET latest_version = IFNULL(latest_version, 0) + 1;

    INSERT INTO Owners_audit (id, version, name, surname, dni, cuit_cuil, date_birth, business_name, active, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, latest_version, NEW.name, NEW.surname, NEW.dni, NEW.cuit_cuil, NEW.date_birth, NEW.business_name, NEW.active, OLD.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$

DELIMITER $$
CREATE TRIGGER trg_plots_insert
AFTER INSERT ON Plots
FOR EACH ROW
BEGIN
    INSERT INTO Plots_audit (id, version, plot_number, block_number, plot_state_id, plot_type_id, total_area_in_m2, built_area_in_m2, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, 1, NEW.plot_number, NEW.block_number, NEW.plot_state_id, NEW.plot_type_id, NEW.total_area_in_m2, NEW.built_area_in_m2, NEW.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$

DELIMITER $$
CREATE TRIGGER trg_plots_update
AFTER UPDATE ON Plots
FOR EACH ROW
BEGIN
    DECLARE latest_version INT;
    SELECT MAX(version) INTO latest_version FROM Plots_audit WHERE id = NEW.id;
    SET latest_version = IFNULL(latest_version, 0) + 1;

    INSERT INTO Plots_audit (id, version, plot_number, block_number, plot_state_id, plot_type_id, total_area_in_m2, built_area_in_m2, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, latest_version, NEW.plot_number, NEW.block_number, NEW.plot_state_id, NEW.plot_type_id, NEW.total_area_in_m2, NEW.built_area_in_m2, OLD.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$ 

DELIMITER $$
CREATE TRIGGER trg_plotowners_insert
AFTER INSERT ON PlotOwners
FOR EACH ROW
BEGIN
    INSERT INTO PlotOwners_audit (id, version, plot_id, owner_id, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, 1, NEW.plot_id, NEW.owner_id, NEW.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$

DELIMITER $$
CREATE TRIGGER trg_plotowners_update
AFTER UPDATE ON PlotOwners
FOR EACH ROW
BEGIN
    DECLARE latest_version INT;
    SELECT MAX(version) INTO latest_version FROM PlotOwners_audit WHERE id = NEW.id;
    SET latest_version = IFNULL(latest_version, 0) + 1;

    INSERT INTO PlotOwners_audit (id, version, plot_id, owner_id, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, latest_version, NEW.plot_id, NEW.owner_id, OLD.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$

DELIMITER $$
CREATE TRIGGER trg_plottypes_insert
AFTER INSERT ON PlotTypes
FOR EACH ROW
BEGIN
    INSERT INTO PlotTypes_audit (id, version, name, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, 1, NEW.name, NEW.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$ 

DELIMITER $$
CREATE TRIGGER trg_plottypes_update
AFTER UPDATE ON PlotTypes
FOR EACH ROW
BEGIN
    DECLARE latest_version INT;
    SELECT MAX(version) INTO latest_version FROM PlotTypes_audit WHERE id = NEW.id;
    SET latest_version = IFNULL(latest_version, 0) + 1;

    INSERT INTO PlotTypes_audit (id, version, name, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, latest_version, NEW.name, OLD.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$ 

DELIMITER $$
CREATE TRIGGER trg_plotstates_insert
AFTER INSERT ON PlotStates
FOR EACH ROW
BEGIN
    INSERT INTO PlotStates_audit (id, version, name, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, 1, NEW.name, NEW.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$ 

DELIMITER $$
CREATE TRIGGER trg_plotstates_update
AFTER UPDATE ON PlotStates
FOR EACH ROW
BEGIN
    DECLARE latest_version INT;
    SELECT MAX(version) INTO latest_version FROM PlotStates_audit WHERE id = NEW.id;
    SET latest_version = IFNULL(latest_version, 0) + 1;

    INSERT INTO PlotStates_audit (id, version, name, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, latest_version, NEW.name, OLD.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$ 

DELIMITER $$
CREATE TRIGGER trg_ownerstypes_insert
AFTER INSERT ON OwnersTypes
FOR EACH ROW
BEGIN
    INSERT INTO OwnersTypes_audit (id, version, name, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, 1, NEW.name, NEW.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$ 

DELIMITER $$
CREATE TRIGGER trg_ownerstypes_update
AFTER UPDATE ON OwnersTypes
FOR EACH ROW
BEGIN
    DECLARE latest_version INT;
    SELECT COALESCE(MAX(version), 0) INTO latest_version FROM OwnersTypes_audit WHERE id = NEW.id;
    SET latest_version = IFNULL(latest_version, 0) + 1;

    INSERT INTO OwnersTypes_audit (id, version, name, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, latest_version, NEW.name, OLD.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$ 

-- Trigger para insertar en la auditoría de Files
DELIMITER $$
CREATE TRIGGER trg_files_insert
AFTER INSERT ON Files
FOR EACH ROW
BEGIN
    INSERT INTO Files_audit (id, version, file_uuid, name, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, 1, NEW.file_uuid, NEW.name, NEW.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$

-- Trigger para actualizar en la auditoría de Files
DELIMITER $$
CREATE TRIGGER trg_files_update
AFTER UPDATE ON Files
FOR EACH ROW
BEGIN
    DECLARE latest_version INT;
    SELECT MAX(version) INTO latest_version FROM Files_audit WHERE id = NEW.id;
    SET latest_version = IFNULL(latest_version, 0) + 1;

    INSERT INTO Files_audit (id, version, file_uuid, name, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, latest_version, NEW.file_uuid, NEW.name, OLD.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$

-- Trigger para insertar en la auditoría de Files_Plots
DELIMITER $$
CREATE TRIGGER trg_files_plots_insert
AFTER INSERT ON Files_Plots
FOR EACH ROW
BEGIN
    INSERT INTO Files_Plots_audit (id, version, file_id, plot_id, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, 1, NEW.file_id, NEW.plot_id, NEW.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$

-- Trigger para actualizar en la auditoría de Files_Plots
DELIMITER $$
CREATE TRIGGER trg_files_plots_update
AFTER UPDATE ON Files_Plots
FOR EACH ROW
BEGIN
    DECLARE latest_version INT;
    SELECT MAX(version) INTO latest_version FROM Files_Plots_audit WHERE id = NEW.id;
    SET latest_version = IFNULL(latest_version, 0) + 1;

    INSERT INTO Files_Plots_audit (id, version, file_id, plot_id, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, latest_version, NEW.file_id, NEW.plot_id, OLD.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$

-- Trigger para insertar en la auditoría de Files_Owners
DELIMITER $$
CREATE TRIGGER trg_files_owners_insert
AFTER INSERT ON Files_Owners
FOR EACH ROW
BEGIN
    INSERT INTO Files_Owners_audit (id, version, file_id, owner_id, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, 1, NEW.file_id, NEW.owner_id, NEW.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$

-- Trigger para actualizar en la auditoría de Files_Owners
DELIMITER $$
CREATE TRIGGER trg_files_owners_update
AFTER UPDATE ON Files_Owners
FOR EACH ROW
BEGIN
    DECLARE latest_version INT;
    SELECT MAX(version) INTO latest_version FROM Files_Owners_audit WHERE id = NEW.id;
    SET latest_version = IFNULL(latest_version, 0) + 1;

    INSERT INTO Files_Owners_audit (id, version, file_id, owner_id, created_datetime, created_user, last_updated_datetime, last_updated_user)
    VALUES (NEW.id, latest_version, NEW.file_id, NEW.owner_id, OLD.created_datetime, NEW.created_user, NEW.last_updated_datetime, NEW.last_updated_user);
END $$
